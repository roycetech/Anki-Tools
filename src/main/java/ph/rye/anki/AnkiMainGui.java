package ph.rye.anki;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.Window;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author royce
 */
public class AnkiMainGui extends javax.swing.JFrame {


    /** */
    private static final long serialVersionUID = 1L;

    static private final String newline = "\n";
    static final String SEP_TITLE = " - ";
    static final String TAGS_MARKER = "@Tags: ";


    private JFileChooser fileChooser;
    private TableRowSorter<CardModel> cardRowSorter;

    boolean fileLoaded = false;

    //    String[] fixedTags = {
    //            "<untagged>",
    //            "High",
    //            "Low",
    //            "Enum",
    //            "BF Only",
    //            "FB Only",
    //            "Ignore" };
    //
    //    Set<String> allTags = new HashSet<>(Arrays.asList(fixedTags));
    //
    //    Object[][] dataTag;
    //
    //    {
    //        dataTag = new Object[fixedTags.length][];
    //        for (int i = 0; i < dataTag.length; i++) {
    //            dataTag[i] = new Object[] {
    //                    fixedTags[i],
    //                    true };
    //        }
    //    }


    //    private final DefaultTableModel tagModel =
    //            new DefaultTableModel(dataTag, new String[] {
    //                    "Tag",
    //                    "Show" }) {
    //
    //                /** */
    //                private static final long serialVersionUID = 1L;
    //
    //                @Override
    //                public Class<?> getColumnClass(final int column) {
    //                    return getValueAt(0, column).getClass();
    //                }
    //            };

    private final TagModel tagModel = new TagModel();

    private final CardModel cardModel = new CardModel();

    /**
     * Creates new form AnkiMainGui
     */
    public AnkiMainGui() {
        AnkiMainGui.enableOSXFullscreen(this);


        initComponents();
    }

    /**
     * @param window
     */
    @SuppressWarnings({
            "unchecked",
            "rawtypes" })
    public static void enableOSXFullscreen(final Window window) {

        try {
            final Class util =
                    Class.forName("com.apple.eawt.FullScreenUtilities");
            final Class params[] = new Class[] {
                    Window.class,
                    Boolean.TYPE };
            final Method method =
                    util.getMethod("setWindowCanFullScreen", params);
            method.invoke(util, window, true);
        } catch (final ClassNotFoundException e1) {} catch (final Exception e) {
            //log.log(Level.WARNING, "OS X Fullscreen FAIL", e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        rdoGrpToggleCol = new javax.swing.ButtonGroup();
        panelLeft = new javax.swing.JPanel();
        btnApply = new javax.swing.JButton();
        scrollPaneText = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        panelRight = new javax.swing.JPanel();
        panelCheckBox = new javax.swing.JPanel();
        chkCheckAll = new javax.swing.JCheckBox();
        btnInverse = new javax.swing.JButton();
        scrollPaneTag = new javax.swing.JScrollPane();
        tblTag = new javax.swing.JTable();
        panelButton = new javax.swing.JPanel();
        btnAddTag = new javax.swing.JButton();
        btnDeleteTag = new javax.swing.JButton();
        panelBottom = new javax.swing.JPanel();
        panelRadio = new javax.swing.JPanel();
        rdoShowBoth = new javax.swing.JRadioButton();
        rdoShowFront = new javax.swing.JRadioButton();
        rdoShowBack = new javax.swing.JRadioButton();
        scrollPaneCard = new javax.swing.JScrollPane();
        tblCard = new javax.swing.JTable();
        lblCard = new javax.swing.JLabel();
        mnuMain = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSaveAs = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        mnuExport = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Anki Source Editor");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelLeft.setBorder(
            new javax.swing.border.SoftBevelBorder(
                javax.swing.border.BevelBorder.RAISED));
        panelLeft.setMaximumSize(new java.awt.Dimension(2147483647, 218));
        panelLeft.setLayout(new java.awt.GridBagLayout());

        btnApply.setText("Apply");
        btnApply.setEnabled(false);
        btnApply.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnApply.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnApply.addActionListener((event) -> {
            final int selectedRow = tblCard.getSelectedRow();
            final int selectedCol = tblCard.getSelectedColumn();
            final Card card = cardModel.getCardAt(selectedRow);
            switch (selectedCol) {
                case 0:
                    card.setFront(textArea.getText());
                    break;

                case 1:
                    card.setBack(textArea.getText());
                    break;
            }

            cardModel.fireTableRowsUpdated(selectedRow, selectedRow);
            btnApply.setEnabled(false);
            textArea.setEditable(false);
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        panelLeft.add(btnApply, gridBagConstraints);

        scrollPaneText.setMaximumSize(new java.awt.Dimension(32767, 80));

        textArea.setEditable(false);
        textArea.setColumns(20);
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setWrapStyleWord(true);
        scrollPaneText.setViewportView(textArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelLeft.add(scrollPaneText, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 0, 10);
        getContentPane().add(panelLeft, gridBagConstraints);

        panelRight.setMaximumSize(new java.awt.Dimension(2147483647, 218));
        panelRight.setMinimumSize(new java.awt.Dimension(200, 106));
        panelRight.setLayout(new java.awt.GridBagLayout());

        chkCheckAll.setSelected(true);
        chkCheckAll.setText("Check All");
        chkCheckAll.addActionListener(evt -> chkCheckAllActionPerformed(evt));
        panelCheckBox.add(chkCheckAll);

        btnInverse.setText("Inverse");
        btnInverse.addActionListener(evt -> btnInverseActionPerformed(evt));
        panelCheckBox.add(btnInverse);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        panelRight.add(panelCheckBox, gridBagConstraints);

        tblTag.setModel(tagModel);
        tblTag.setCellSelectionEnabled(false);
        tblTag.setRowSelectionAllowed(true);

        tblTag.getModel().addTableModelListener(e -> {

            if (fileLoaded) {
                filterCards();
            }

        });

        final ListSelectionModel tagCellSelectionModel =
                tblTag.getSelectionModel();
        tagCellSelectionModel
            .setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        tagCellSelectionModel.addListSelectionListener(e -> {
            final int[] selectedRow = tblTag.getSelectedRows();
            btnDeleteTag.setEnabled(
                selectedRow.length > 0
                        && selectedRow[0] >= TagModel.FIXED_TAGS.length);
        });
        scrollPaneTag.setViewportView(tblTag);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelRight.add(scrollPaneTag, gridBagConstraints);

        btnAddTag.setText("Add");
        btnAddTag.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAddTag.addActionListener(evt -> btnAddTagActionPerformed(evt));
        panelButton.add(btnAddTag);

        btnDeleteTag.setText("Delete");
        btnDeleteTag.setEnabled(false);
        btnDeleteTag.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDeleteTag.addActionListener(evt -> btnDeleteTagActionPerformed(evt));
        panelButton.add(btnDeleteTag);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        panelRight.add(panelButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        getContentPane().add(panelRight, gridBagConstraints);

        panelBottom.setLayout(new java.awt.GridBagLayout());

        rdoGrpToggleCol.add(rdoShowBoth);
        rdoShowBoth.setSelected(true);
        rdoShowBoth.setText("Show Both");
        rdoShowBoth.addActionListener(evt -> rdoShowBothActionPerformed(evt));
        panelRadio.add(rdoShowBoth);

        rdoGrpToggleCol.add(rdoShowFront);
        rdoShowFront.setText("Front Only");
        rdoShowFront.addActionListener(evt -> rdoShowFrontActionPerformed(evt));
        panelRadio.add(rdoShowFront);

        rdoGrpToggleCol.add(rdoShowBack);
        rdoShowBack.setText("Back Only");
        rdoShowBack.addActionListener(evt -> rdoShowBackActionPerformed(evt));
        panelRadio.add(rdoShowBack);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        panelBottom.add(panelRadio, gridBagConstraints);

        tblCard.setModel(cardModel);

        tblCard.setColumnSelectionAllowed(true);
        tblCard.setRowSelectionAllowed(true);

        cardRowSorter = new TableRowSorter<>(cardModel);
        tblCard.setRowSorter(cardRowSorter);

        final ListSelectionModel cardColSelectionModel =
                tblCard.getColumnModel().getSelectionModel();

        final ListSelectionModel cardRowSelectionModel =
                tblCard.getSelectionModel();

        tblCard.setShowGrid(true);
        final ListSelectionListener cellChangeListener = e -> {
            String selectedData = null;

            final int[] selectedRow = tblCard.getSelectedRows();
            final int[] selectedColumns = tblCard.getSelectedColumns();

            for (int i = 0; i < selectedRow.length; i++) {
                for (int j = 0; j < selectedColumns.length; j++) {
                    selectedData = (String) tblCard
                        .getValueAt(selectedRow[i], selectedColumns[j]);
                    if (selectedColumns[j] < 2) {
                        textArea.setText(selectedData);
                    } else {
                        textArea.setText("");
                    }
                    textArea.setEditable(selectedColumns[j] < 2);
                    btnApply.setEnabled(textArea.isEditable());
                }
            }
        };

        cardColSelectionModel.addListSelectionListener(cellChangeListener);
        cardRowSelectionModel.addListSelectionListener(cellChangeListener);
        scrollPaneCard.setViewportView(tblCard);
        tblCard.getColumnModel().getSelectionModel().setSelectionMode(
            javax.swing.ListSelectionModel.SINGLE_SELECTION);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelBottom.add(scrollPaneCard, gridBagConstraints);

        lblCard.setText("No cards found.");
        lblCard.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        panelBottom.add(lblCard, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 3.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(panelBottom, gridBagConstraints);

        jMenu1.setText("File");

        mnuOpen.setAccelerator(
            javax.swing.KeyStroke.getKeyStroke(
                java.awt.event.KeyEvent.VK_O,
                java.awt.event.InputEvent.META_MASK));
        mnuOpen.setText("Open...");
        mnuOpen.addActionListener(evt -> mnuOpenActionPerformed(evt));
        jMenu1.add(mnuOpen);

        mnuSaveAs.setText("Save As...");
        mnuSaveAs.setEnabled(false);
        jMenu1.add(mnuSaveAs);

        mnuSave.setAccelerator(
            javax.swing.KeyStroke.getKeyStroke(
                java.awt.event.KeyEvent.VK_S,
                java.awt.event.InputEvent.META_MASK));
        mnuSave.setText("Save");
        mnuSave.setEnabled(false);
        jMenu1.add(mnuSave);

        mnuExport.setAccelerator(
            javax.swing.KeyStroke.getKeyStroke(
                java.awt.event.KeyEvent.VK_E,
                java.awt.event.InputEvent.META_MASK));
        mnuExport.setText("Export");
        mnuExport.setEnabled(false);
        jMenu1.add(mnuExport);

        mnuExit.setAccelerator(
            javax.swing.KeyStroke.getKeyStroke(
                java.awt.event.KeyEvent.VK_Q,
                java.awt.event.InputEvent.META_MASK));
        mnuExit.setText("Quit");
        mnuExit.addActionListener(evt -> mnuExitActionPerformed(evt));
        jMenu1.add(mnuExit);

        mnuMain.add(jMenu1);

        setJMenuBar(mnuMain);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void filterCards() {

        //System.out.println("filterCards");

        tblTag.getModel().getRowCount();

        cardRowSorter.setRowFilter(new RowFilter<CardModel, Object>() {

            @Override
            public boolean include(final javax.swing.RowFilter.Entry<? extends CardModel, ? extends Object> entry) {

                final String tagStr = (String) entry.getValue(2);
                final String[] tagArr;
                if ("".equals(tagStr)) {
                    tagArr = new String[] {
                            "<untagged>" };
                } else {
                    tagArr = StringUtil.trimArray(tagStr.split(","));
                }

                final Ano<Boolean> retval = new Ano<>(false);
                for (final String tag : tagArr) {
                    if (tagModel.isTagEnabled(tag)) {
                        retval.set(true);
                        break;
                    }
                }
                return retval.get();
            }


        });
    }

    private void btnAddTagActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTagActionPerformed

        final String newTag = (String) JOptionPane.showInputDialog(
            this,
            "Tag Name",
            "Add New Tag",
            JOptionPane.PLAIN_MESSAGE,
            null,
            null,
            null);

        if (StringUtil.hasValue(newTag)) {
            tagModel.addTag(new Tag(newTag, true));
        }


        //        tagModel.addRow(new Object[] {
        //                newTag,
        //                true });

    }//GEN-LAST:event_btnAddTagActionPerformed

    private void rdoShowFrontActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShowFrontActionPerformed
        shrinkColumnSize(tblCard.getColumnModel().getColumn(1));
        restoreColumnSize(tblCard.getColumnModel().getColumn(0));
    }//GEN-LAST:event_rdoShowFrontActionPerformed

    private void rdoShowBackActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShowBackActionPerformed
        shrinkColumnSize(tblCard.getColumnModel().getColumn(0));
        restoreColumnSize(tblCard.getColumnModel().getColumn(1));
    }//GEN-LAST:event_rdoShowBackActionPerformed

    private void btnDeleteTagActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTagActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDeleteTagActionPerformed

    private void mnuExitActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuExitActionPerformed

    private void mnuOpenActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(
                new File("/Users/royce/DropBox/Documents/Memorize/"));
            fileChooser.setFileFilter(new FileFilter() {
                @Override
                public boolean accept(final File pathname) {
                    return pathname.getName().endsWith(".txt")
                            && pathname.isFile() || pathname.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "Text Files";
                }
            });
        };

        final int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            final File file = fileChooser.getSelectedFile();

            final String appTitle;
            final int sepIndex = getTitle().indexOf(SEP_TITLE);
            if (sepIndex > -1) {
                appTitle = getTitle().substring(0, sepIndex);
            } else {
                appTitle = getTitle();
            }

            setTitle(appTitle + SEP_TITLE + file.getName());
            openFile(file);

        } else {
            System.out.println("Open command cancelled by user." + newline);
        }

    }//GEN-LAST:event_mnuOpenActionPerformed

    void registerCard(final List<String> front, final List<String> back,
                      final List<String> tags) {

        final Card newCard = new Card(
            StringUtil.join(front, "\n"),
            StringUtil.join(back, "\n"));

        newCard.addTags(tags.toArray(new String[tags.size()]));

        cardModel.addCard(newCard);

        for (final String tag : tags) {
            tagModel.addTag(new Tag(tag, true));
        }
    }


    void openFile(final File file) {

        try (BufferedReader br = new BufferedReader(new FileReader(file))) {
            int space_counter = 0;
            boolean is_answer = false;

            final List<String> front = new ArrayList<String>();
            final List<String> back = new ArrayList<String>();
            final List<String> tags = new ArrayList<String>();

            for (String line; (line = br.readLine()) != null;) {
                //System.out.println(line);

                if ("".equals(line.trim())) {
                    space_counter += 1;
                } else {

                    if (space_counter >= 2) {
                        is_answer = false;

                        registerCard(front, back, tags);

                        front.clear();
                        back.clear();
                        tags.clear();
                    } else if (space_counter == 1) {
                        is_answer = true;
                    }

                    if (!is_answer) {

                        if (line.startsWith(TAGS_MARKER)) {
                            tags
                                .addAll(
                                    Arrays
                                        .asList(
                                            StringUtil
                                                .trimArray(
                                                    line
                                                        .substring(
                                                            TAGS_MARKER
                                                                .length())
                                                        .split(","))));
                        } else {
                            front.add(StringUtil.rtrim(line));
                        }
                    } else {
                        back.add(line);
                    }

                    space_counter = 0;
                }
            }
        } catch (final IOException ex) {
            Logger.getLogger(AnkiMainGui.class.getName()).log(
                Level.SEVERE,
                null,
                ex);
        }
        fileLoaded = true;

    }


    private void rdoShowBothActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdoShowBothActionPerformed
        restoreColumnSize(tblCard.getColumnModel().getColumn(0));
        restoreColumnSize(tblCard.getColumnModel().getColumn(1));
    }//GEN-LAST:event_rdoShowBothActionPerformed

    private void chkCheckAllActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCheckAllActionPerformed
        final JCheckBox checkBox = (JCheckBox) evt.getSource();
        for (int i = 0; i < tagModel.getRowCount(); i++) {
            tagModel.setValueAt(checkBox.isSelected(), i, 1);
        }
    }//GEN-LAST:event_chkCheckAllActionPerformed

    private void btnInverseActionPerformed(final java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkInverseActionPerformed
        for (int i = 0; i < tagModel.getRowCount(); i++) {
            tagModel.setValueAt(!(Boolean) tagModel.getValueAt(i, 1), i, 1);
        }
    }//GEN-LAST:event_chkInverseActionPerformed

    void restoreColumnSize(final TableColumn column) {
        System.out.println("Restoring...");
        column.setPreferredWidth(75);
        column.setMinWidth(15);
        column.setMaxWidth(Integer.MAX_VALUE);
    }

    void shrinkColumnSize(final TableColumn column) {
        System.out.println("Hiding column...");
        column.setPreferredWidth(0);
        column.setMinWidth(0);
        column.setMaxWidth(0);
    }


    /** When a file is opened, enable GUI components. */
    void initGUIForEditing() {

    }


    /**
     * @param args the command line arguments
     */
    public static void main(final String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (final javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (final ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnkiMainGui.class.getName()).log(
                java.util.logging.Level.SEVERE,
                null,
                ex);
        } catch (final InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnkiMainGui.class.getName()).log(
                java.util.logging.Level.SEVERE,
                null,
                ex);
        } catch (final IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnkiMainGui.class.getName()).log(
                java.util.logging.Level.SEVERE,
                null,
                ex);
        } catch (final javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnkiMainGui.class.getName()).log(
                java.util.logging.Level.SEVERE,
                null,
                ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue
            .invokeLater(() -> new AnkiMainGui().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTag;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnDeleteTag;
    private javax.swing.JButton btnInverse;
    private javax.swing.JCheckBox chkCheckAll;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JLabel lblCard;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuExport;
    private javax.swing.JMenuBar mnuMain;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenuItem mnuSaveAs;
    private javax.swing.JPanel panelBottom;
    private javax.swing.JPanel panelButton;
    private javax.swing.JPanel panelCheckBox;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelRadio;
    private javax.swing.JPanel panelRight;
    private javax.swing.ButtonGroup rdoGrpToggleCol;
    private javax.swing.JRadioButton rdoShowBack;
    private javax.swing.JRadioButton rdoShowBoth;
    private javax.swing.JRadioButton rdoShowFront;
    private javax.swing.JScrollPane scrollPaneCard;
    private javax.swing.JScrollPane scrollPaneTag;
    private javax.swing.JScrollPane scrollPaneText;
    private javax.swing.JTable tblCard;
    private javax.swing.JTable tblTag;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
